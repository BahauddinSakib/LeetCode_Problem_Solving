public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {

        var res = new List<IList<int>>();  //a collection of all unique triplate
        if(nums==null || nums.Length<3) return res; //if array length less than 3 return empty

        Array.Sort(nums); //sort
       // Set<IList<IList<int>>> res = new HashSet(); //only tajes unique value

        for(int i=0;i<nums.Length-2;i++){
             // Skip duplicate elements for the first number
            if (i > 0 && nums[i] == nums[i - 1]) continue;  //i>0 means duplicate run and nums[i] == nums[i - 1] means curr and orev same so skips iteration

            int left = i+1;
            int right= nums.Length-1;

            while(left<right){
                int sum= nums[i]+nums[left]+nums[right];

                if(sum==0){
                     res.Add(new List<int> { nums[i], nums[left], nums[right] });
                    left++;
                    right--;

                     // Skip duplicate elements for the second and third numbers
                    while (left < right && nums[left] == nums[left - 1]) left++;
                    while (left < right && nums[right] == nums[right + 1]) right--;
                }else if(sum<0){
                     left++;
                }
                  
                  else {
                       right--;
                  }
                  
            }
        }
             return res;
        
    }
}
